// Code generated by dagger-compiler.  Do not edit.
package com.mobileappdevelopersclub.fapp.ui;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<EventsListFragment>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code EventsListFragment} and its
 * dependencies.
 * 
 * Being a {@code Provider<EventsListFragment>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<EventsListFragment>} and handling injection
 * of annotated fields.
 */
public final class EventsListFragment$$InjectAdapter extends Binding<EventsListFragment>
    implements Provider<EventsListFragment>, MembersInjector<EventsListFragment> {
  private Binding<org.ektorp.CouchDbInstance> dbInstance;
  private Binding<com.mobileappdevelopersclub.fapp.FappFragment> supertype;

  public EventsListFragment$$InjectAdapter() {
    super("com.mobileappdevelopersclub.fapp.ui.EventsListFragment", "members/com.mobileappdevelopersclub.fapp.ui.EventsListFragment", NOT_SINGLETON, EventsListFragment.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    dbInstance = (Binding<org.ektorp.CouchDbInstance>) linker.requestBinding("org.ektorp.CouchDbInstance", EventsListFragment.class, getClass().getClassLoader());
    supertype = (Binding<com.mobileappdevelopersclub.fapp.FappFragment>) linker.requestBinding("members/com.mobileappdevelopersclub.fapp.FappFragment", EventsListFragment.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(dbInstance);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<EventsListFragment>}.
   */
  @Override
  public EventsListFragment get() {
    EventsListFragment result = new EventsListFragment();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<EventsListFragment>}.
   */
  @Override
  public void injectMembers(EventsListFragment object) {
    object.dbInstance = dbInstance.get();
    supertype.injectMembers(object);
  }
}
